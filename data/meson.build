intltool_merge = find_program('intltool-merge')

installp = not get_option('compiled_definitions')
install_dir = datadir / 'qalculate'

data_files = []
foreach f : ['currencies.xml.in', 'datasets.xml.in', 'elements.xml.in',
             'functions.xml.in', 'planets.xml.in', 'prefixes.xml.in',
             'units.xml.in', 'variables.xml.in']
  f_out = f.replace('.in', '')
  # TODO gettext po update and pot generate targets for stuff under po-defs/
  # NOTE: po/ is for everything in code files and only runs if use_nls=true, po-defs/ is for *.in files in data/ and is always run
  data_files += custom_target(
    f_out,
    input : f,
    output : f_out,
    command : [intltool_merge, '-x', '-u', '-c', '.intltool-merge-cache', meson.source_root() / 'po-defs', '@INPUT@', '@OUTPUT@'],
    install : installp, install_dir : install_dir)
endforeach
foreach f : ['eurofxref-daily.xml', 'rates.json']
  if installp
    install_data(f, install_dir : install_dir)
  endif
  data_files += files(f)

  # Reason why this is here: to make development easier, allowing a similar workflow of running ./qalc inside the builddir just as autotools (except in that case builddir == srcdir)
  # This is because libqalculate's data path loading logic works like this:
  # - if <cwd>/libqalculate/ exists and <cwd>/data/functions.xml exists, then select <cwd>/data
  #   (note functions.xml is generated by autotools inside data/)
  # - else, select PACKAGE_DATA_DIR/qalculate
  # Clearly this is oriented for running ./qalc inside the project folder, i.e. it expects all the install-ready data files to reside in <cwd>/data/
  # Note that it also checks with <cwd>/../ too, to accommodate for using a separate builddir in autotools; but that still requires all data files to reside in a single folder, so copying is still necessary
  fs.copyfile(f, f)
endforeach

if get_option('compiled_definitions')
  add_languages('c')

  data_definitions_c = custom_target(
    'definitions.c',
    input : [data_files],
    output : 'definitions.c',
    command : [python, files('meson.gen-defs.py'), '--output=@OUTPUT@', '@INPUT@'])
endif
